# hash id is the full length
define make_p0_patch
	printf "\nCreating a p0 patch file in $(TOP)/patch\\n";
	cd $(SRC_PATH) && git diff --no-prefix > $(TOP)/patch/$$(git rev-parse HEAD).p0.patch
endef

define patch_src
for i in $(wildcard $(TOP)/patch/$(SRC_TAG)*.p0.patch); do\
	printf "\nPatching %s with the file : %s\n" "$(SRC_PATH)" "$$i";\
	patch -d $(SRC_PATH) --ignore-whitespace -p0 < $$i;\
done
endef


define revert_patch_src
for i in $(wildcard $(TOP)/patch/$(SRC_TAG)*.p0.patch); do\
	printf "\nReverting applied patch %s with the file : %s\n" "$(SRC_PATH)" "$$i";\
	patch -R -d $(SRC_PATH) --ignore-whitespace -p0 < $$i;\
done
endef

GIT_VERSION:=$(lastword $(shell git --version))

define gitclone
$(if $(wildcard $(2)), @echo"", git clone  $(1) $(2); git -C $(2) checkout $(3))
endef

define distclean
$(if $(wildcard $(1)), @rm -rf $(1), @echo "There is no source path at $(1).")
endef

# it may be useful for git with older than 1.8.5, which doesn't have -C option.
define gitclone2
	git clone  $(1) $(2) 
	cd $(2) && git checkout $(3)
endef

define checkfile
$(if $(wildcard $(1)), @echo "There is no source path at $(1).",@echo ">>> Found exist$(1) will be deleted." && rm -f $(1) )
endef


ifndef VERBOSE
  QUIET := @
endif


ifdef DEBUG_SHELL
  SHELL = /bin/sh -x
endif

##	tomcat9-instance-create create startup.sh and shutdown.sh
##  This function will cover all functionatities except port number configuration 
##  in conf/server.xml. The except steup will be covered at serverxml.install in 
##  RULES_INSTALL
##  
## 1 : USERID (tomcat, is the same as groupid)
## 2 : archappl INSTALL_LOCATION 
## 3 : each service INSTALL_LOCATION_SERVICES
## 4 : RETURN
define a_service_BUIDER
install.$(patsubst $(2)/%,%,$(3)):
	@echo ">>> Installing $(patsubst $(2)/%,%,$(3))"
	@echo "    0) Creating $(3)/{conf,logs,webapps,work,temp}"
	@sudo install -d $(3)
	@sudo install -d $(3)/conf
	@sudo install -d $(3)/logs
	@sudo install -d $(3)/webapps
	@sudo install -d $(3)/work
	@sudo install -d $(3)/temp
	@echo "    1) Copy all template from $(TOMCAT_HOME)/skel/* to $(3)/"
	@sudo cp -r $(TOMCAT_HOME)/skel/* $(3)/
	@echo "    2) Extracting $(patsubst $(2)/%,%,$(3)).war into $(3)/webapps/$(patsubst $(2)/%,%,$(3))"
	@sudo unzip -q -o $(WARS_TARGET)/$(patsubst $(2)/%,%,$(3)).war -d $(3)/webapps/$(patsubst $(2)/%,%,$(3))
	@echo "    3) Install $(ARCHAPPL_CONTEXT_XML) into $(3)/conf/"
	@sudo install -m 644 $(SITE_TEMPLATE_PATH)/$(ARCHAPPL_CONTEXT_XML) $(3)/conf/
	@echo "    4) Install $(ARCHAPPL_TOMCAT_STARTUP) and $(ARCHAPPL_TOMCAT_SHUTDOWN) in $(3)/bin"
	@sudo -E bash -c "sed -e 's|@INSTALL_LOCATION@|$(3)|g' -e 's|@SERVICE_NAME@|$(patsubst $(2)/%,%,$(3))|g' -e 's|@ARCHAPPL_TOP@|$(ARCHAPPL_TOP)|g' < $(SITE_TEMPLATE_PATH)/$(ARCHAPPL_TOMCAT_STARTUP).in > $(3)/bin/$(ARCHAPPL_TOMCAT_STARTUP)"
	@sudo -E bash -c "sed -e 's|@INSTALL_LOCATION@|$(3)|g' -e 's|@SERVICE_NAME@|$(patsubst $(2)/%,%,$(3))|g' -e 's|@ARCHAPPL_TOP@|$(ARCHAPPL_TOP)|g' < $(SITE_TEMPLATE_PATH)/$(ARCHAPPL_TOMCAT_SHUTDOWN).in > $(3)/bin/$(ARCHAPPL_TOMCAT_SHUTDOWN)"
	@sudo chmod +x $(3)/bin/*
	@echo "    5) Change $(3) permission with $(1):$(1)"
	@sudo chown -R $(1):$(1) $(3)
	@sudo echo ""

$(4)+=install.$(patsubst $(2)/%,%,$(3))
endef


# 1 : USERID
# 2 : INSTALL_LOCATION
# 3 : INSTALL_LOCATION_SERVICES
# 4 : RETURN
define buildrules_BUILDER
$(foreach dir, $(3), $(eval $(call a_service_BUIDER,$(1),$(2),$(dir),$(4))))
endef

define classpathfile_output 
$(ARCHAPPL_SITEID_CLASSPATHFILES_PATH)/$(notdir $(basename $(1)))
endef

### Exclude the following variables to display
VARS_EXCLUDES+=make_p0_patch
VARS_EXCLUDES+=patch_src
VARS_EXCLUDES+=revert_patch_src
VARS_EXCLUDES+=QUIET
VARS_EXCLUDES+=SHELL
VARS_EXCLUDES+=gitclone
VARS_EXCLUDES+=gitclone2
VARS_EXCLUDES+=distclean
VARS_EXCLUDES+=checkfile

